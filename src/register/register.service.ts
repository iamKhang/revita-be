import { Injectable, BadRequestException, ConflictException, NotFoundException } from '@nestjs/common';
import { PrismaClient, Role } from '@prisma/client';
import { RedisService } from '../cache/redis.service';
import { EmailService } from '../email/email.service';
import { SmsService } from '../sms/sms.service';
import { RegisterStep1Dto } from './dto/register-step1.dto';
import { VerifyOtpDto } from './dto/verify-otp.dto';
import { CompleteRegistrationDto } from './dto/complete-registration.dto';
import * as bcrypt from 'bcryptjs';
import { v4 as uuidv4 } from 'uuid';

@Injectable()
export class RegisterService {
  constructor(
    private readonly prisma: PrismaClient,
    private readonly redisService: RedisService,
    private readonly emailService: EmailService,
    private readonly smsService: SmsService,
  ) {}

  /**
   * B∆∞·ªõc 1: ƒêƒÉng k√Ω v·ªõi s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email
   */
  async registerStep1(registerDto: RegisterStep1Dto): Promise<{ sessionId: string; message: string }> {
    const { phone, email } = registerDto;

    // Ki·ªÉm tra xem phone ho·∫∑c email ƒë√£ t·ªìn t·∫°i ch∆∞a
    if (phone) {
      const existingAuth = await this.prisma.auth.findUnique({
        where: { phone },
      });
      if (existingAuth) {
        throw new ConflictException('S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
      }
    }

    if (email) {
      const existingAuth = await this.prisma.auth.findUnique({
        where: { email },
      });
      if (existingAuth) {
        throw new ConflictException('Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
      }
    }

    // T·∫°o OTP 6 ch·ªØ s·ªë
    const otp = this.generateOtp();
    
    // T·∫°o session ID
    const sessionId = uuidv4();
    
    // L∆∞u th√¥ng tin v√†o Redis
    const sessionData = {
      phone,
      email,
      step: 1,
      verified: false,
      createdAt: new Date().toISOString(),
    };

    await this.redisService.setSession(sessionId, sessionData);
    
    // L∆∞u OTP v·ªõi key l√† sessionId
    await this.redisService.setOtp(`otp:${sessionId}`, otp, 300); // 5 ph√∫t

    // G·ª≠i OTP qua SMS ho·∫∑c Email
    let sendSuccess = false;
    if (phone) {
      sendSuccess = await this.smsService.sendOtp(phone, otp);
    } else if (email) {
      sendSuccess = await this.emailService.sendOtp(email, otp);
    }

    if (!sendSuccess) {
      // N·∫øu g·ª≠i th·∫•t b·∫°i, v·∫´n log ra console ƒë·ªÉ development
      console.log(`üîê OTP cho ${phone || email}: ${otp} (G·ª≠i th·∫•t b·∫°i, hi·ªÉn th·ªã ƒë·ªÉ test)`);
      console.log(`üì± Session ID: ${sessionId}`);
    }

    return {
      sessionId,
      message: phone
        ? `M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i ${phone}`
        : `M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email ${email}`,
    };
  }

  /**
   * B∆∞·ªõc 2: X√°c th·ª±c OTP
   */
  async verifyOtp(verifyDto: VerifyOtpDto): Promise<{ sessionId: string; message: string }> {
    const { otp, sessionId } = verifyDto;

    // L·∫•y th√¥ng tin session
    const sessionData = await this.redisService.getSession(sessionId);
    if (!sessionData) {
      throw new NotFoundException('Session kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // L·∫•y OTP t·ª´ Redis
    const storedOtp = await this.redisService.getOtp(`otp:${sessionId}`);
    if (!storedOtp) {
      throw new BadRequestException('OTP ƒë√£ h·∫øt h·∫°n');
    }

    // Ki·ªÉm tra OTP
    if (storedOtp !== otp) {
      throw new BadRequestException('OTP kh√¥ng ch√≠nh x√°c');
    }

    // C·∫≠p nh·∫≠t session - ƒë√°nh d·∫•u ƒë√£ x√°c th·ª±c
    sessionData.verified = true;
    sessionData.step = 2;
    await this.redisService.setSession(sessionId, sessionData, 1800); // 30 ph√∫t

    // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
    await this.redisService.deleteOtp(`otp:${sessionId}`);

    return {
      sessionId,
      message: 'X√°c th·ª±c OTP th√†nh c√¥ng. Vui l√≤ng ho√†n t·∫•t th√¥ng tin ƒëƒÉng k√Ω.',
    };
  }

  /**
   * B∆∞·ªõc 3: Ho√†n t·∫•t ƒëƒÉng k√Ω
   */
  async completeRegistration(completeDto: CompleteRegistrationDto): Promise<{ message: string; userId: string }> {
    const { sessionId, name, dateOfBirth, gender, address, citizenId, avatar, password } = completeDto;

    // L·∫•y th√¥ng tin session
    const sessionData = await this.redisService.getSession(sessionId);
    if (!sessionData) {
      throw new NotFoundException('Session kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // Ki·ªÉm tra xem ƒë√£ x√°c th·ª±c OTP ch∆∞a
    if (!sessionData.verified || sessionData.step !== 2) {
      throw new BadRequestException('Ch∆∞a x√°c th·ª±c OTP ho·∫∑c session kh√¥ng h·ª£p l·ªá');
    }

    // Ki·ªÉm tra citizenId n·∫øu c√≥
    if (citizenId) {
      const existingUser = await this.prisma.user.findUnique({
        where: { citizenId },
      });
      if (existingUser) {
        throw new ConflictException('S·ªë CMND/CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
      }
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    try {
      // T·∫°o user v√† auth trong transaction
      const result = await this.prisma.$transaction(async (prisma) => {
        // T·∫°o User
        const user = await prisma.user.create({
          data: {
            name,
            dateOfBirth: new Date(dateOfBirth),
            gender,
            address,
            citizenId,
            avatar,
            role: Role.PATIENT, // M·∫∑c ƒë·ªãnh l√† PATIENT
          },
        });

        // T·∫°o Auth
        await prisma.auth.create({
          data: {
            userId: user.id,
            phone: sessionData.phone,
            email: sessionData.email,
            password: hashedPassword,
          },
        });

        // T·∫°o Patient record
        await prisma.patient.create({
          data: {
            patientCode: `PAT${Date.now()}`, // T·∫°o m√£ b·ªánh nh√¢n
            userId: user.id,
            address,
            emergencyContact: {}, // C√≥ th·ªÉ ƒë·ªÉ tr·ªëng ban ƒë·∫ßu
          },
        });

        return user;
      });

      // X√≥a session sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
      await this.redisService.deleteSession(sessionId);

      // G·ª≠i email/SMS ch√†o m·ª´ng
      if (sessionData.email) {
        await this.emailService.sendWelcomeEmail(sessionData.email, name);
      }
      if (sessionData.phone) {
        await this.smsService.sendWelcomeSms(sessionData.phone, name);
      }

      return {
        message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
        userId: result.id,
      };
    } catch (error) {
      console.error('Error during registration:', error);
      throw new BadRequestException('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω');
    }
  }

  /**
   * T·∫°o OTP 6 ch·ªØ s·ªë
   */
  private generateOtp(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * G·ª≠i l·∫°i OTP
   */
  async resendOtp(sessionId: string): Promise<{ message: string }> {
    // L·∫•y th√¥ng tin session
    const sessionData = await this.redisService.getSession(sessionId);
    if (!sessionData) {
      throw new NotFoundException('Session kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    if (sessionData.verified) {
      throw new BadRequestException('OTP ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c');
    }

    // T·∫°o OTP m·ªõi
    const otp = this.generateOtp();

    // L∆∞u OTP m·ªõi
    await this.redisService.setOtp(`otp:${sessionId}`, otp, 300); // 5 ph√∫t

    // G·ª≠i OTP m·ªõi qua SMS ho·∫∑c Email
    let sendSuccess = false;
    if (sessionData.phone) {
      sendSuccess = await this.smsService.sendOtp(sessionData.phone, otp);
    } else if (sessionData.email) {
      sendSuccess = await this.emailService.sendOtp(sessionData.email, otp);
    }

    if (!sendSuccess) {
      // N·∫øu g·ª≠i th·∫•t b·∫°i, v·∫´n log ra console ƒë·ªÉ development
      console.log(`üîê OTP m·ªõi cho ${sessionData.phone || sessionData.email}: ${otp} (G·ª≠i th·∫•t b·∫°i, hi·ªÉn th·ªã ƒë·ªÉ test)`);
    }

    return {
      message: sessionData.phone
        ? `M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i ${sessionData.phone}`
        : `M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email ${sessionData.email}`,
    };
  }
}
